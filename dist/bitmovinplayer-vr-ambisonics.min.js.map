{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/omnitone/build/omnitone.js","src/ts/Ambisonics.ts","src/ts/OmnitoneFOARendererImplementation.ts","src/ts/main.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","root","factory","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","m","c","p","Omnitone","AudioBufferManager","FOAConvolver","FOARouter","FOARotator","FOAPhaseMatchedFilter","FOAVirtualSpeaker","FOADecoder","FOARenderer","loadAudioBuffers","context","speakerData","Promise","resolve","reject","buffers","createFOAConvolver","options","createFOARouter","channelMap","createFOARotator","createFOAPhaseMatchedFilter","createFOAVirtualSpeaker","createFOADecoder","videoElement","createFOARenderer","audioFileData","progress","_context","_buffers","Map","_loadingTasks","_resolve","_reject","_progress","fileInfo","hasOwnProperty","name","Utils","log","_loadAudioFile","prototype","xhr","XMLHttpRequest","open","url","responseType","that","onload","status","decodeAudioData","response","buffer","_done","message","statusText","onerror","event","send","filename","set","_updateProgress","numberOfFinishedTasks","numberOfFailedTask","numberOfTasks","task","window","console","apply","Array","slice","arguments","join","performance","now","toFixed","invertMatrix4","out","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","IR","numberOfChannels","_active","_input","createChannelSplitter","_mergerWY","createChannelMerger","_mergerZX","_convolverWY","createConvolver","_convolverZX","_splitterWY","_splitterZX","_inverter","createGain","_mergerBinaural","_summingBus","connect","normalize","_setHRIRBuffers","gain","value","input","output","enable","hrirBuffer","_hrirWY","createBuffer","sampleRate","_hrirZX","getChannelData","disable","disconnect","_splitter","_merger","_channelMap","CHANNEL_MAP","DEFAULT","APPLE","FUMA","setChannelMap","_inY","_inZ","_inX","_m0","_m1","_m2","_m3","_m4","_m5","_m6","_m7","_m8","_outY","_outZ","_outX","setRotationMatrix","Float32Array","rotationMatrix","setRotationMatrix4","rotationMatrix4","getRotationMatrix","generateDualBandCoefficients","crossoverFrequency","k","Math","tan","PI","k2","denominator","lowpassA","lowpassB","hipassA","hipassB","createIIRFilter","coef","CROSSOVER_FREQUENCY","_lpf","_hpf","createBiquadFilter","frequency","type","_splitterLow","_splitterHigh","_gainHighW","_gainHighY","_gainHighZ","_gainHighX","currentTime","setValueAtTime","GAIN_COEFFICIENTS","_cW","_cY","_cZ","_cX","_convolver","_gain","destination","coefficients","_isDecoderReady","_videoElement","_decodingMode","_postGainDB","POST_GAIN_DB","_HRTFSetUrl","HRTFSET_URL","postGainDB","HRTFSetUrl","_speakerData","FOASpeakerData","push","_tempMatrix4","SystemVersion","initialize","channelMapString","toString","defaultChannelMapString","_audioElementSource","createMediaElementSource","_foaRouter","_foaRotator","_foaPhaseMatchedFilter","_foaVirtualSpeakers","_bypass","postGainLinear","pow","me","get","setMode","setRotationMatrixFromCamera","cameraMatrix","elements","mode","gainFactor","_HRIRUrl","SH_MAXRE_HRIR_URL","_renderingMode","HRIRUrl","renderingMode","_isRendererReady","_initializeCallback","bind","key","_foaConvolver","setRenderingMode","errorMessage","OmnitoneFOARendererImplementation_1","Ambisonics","player","config","_this","onPlayerReady","onPlayerAudioChanged","isOldAudioTrackAmbisonic","isAmbisonicTrack","sourceAudio","isNewAudioTrackAmbisonic","targetAudio","debug","onPlayerVrViewingDirectionChange","direction","implementation","update","autoSelectAmbisonicAudio","yawOffset","addEventHandler","EVENT","ON_READY","ON_AUDIO_CHANGED","isReady","release","removeEventHandler","audioContext","AudioContext","mediaElement","getVideoElement","isVrContent","audioTracks","getAvailableAudio","ambisonicAudioTrack","findFirstAmbisonicTrack","setAudio","enabled","OmnitoneFOARendererImplementation","start","catch","error","ON_VR_VIEWING_DIRECTION_CHANGE","getConfig","source","vr","audioTrack","audioTrackRoles","role","_i","audioTrackRoles_1","audioTrackRole","schemeIdUri","VR_SCHEME_ID_URI","VR_SCHEME_VALUE_FOA","audioTracks_1","degToRad","yaw","pitch","roll","correctedYaw","correctedPitch","correctedRoll","alpha","beta","gamma","sinAlpha","sin","cosAlpha","cos","sinBeta","cosBeta","sinGamma","cosGamma","omnitone_1","audioSource","foaRenderer","then","Ambisonics_1","w","bitmovin"],"mappings":"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","file":"bitmovinplayer-vr-ambisonics.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @license\n\t * Copyright 2016 Google Inc. All Rights Reserved.\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\n\t'use strict';\n\n\t// Primary namespace for Omnitone library.\n\texports.Omnitone = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2016 Google Inc. All Rights Reserved.\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\n\t/**\n\t * @fileOverview Omnitone library name space and common utilities.\n\t */\n\n\t'use strict';\n\n\t/**\n\t * @class Omnitone main namespace.\n\t */\n\tvar Omnitone = {};\n\n\t// Internal dependencies.\n\tvar AudioBufferManager = __webpack_require__(2);\n\tvar FOAConvolver = __webpack_require__(4);\n\tvar FOARouter = __webpack_require__(5);\n\tvar FOARotator = __webpack_require__(6);\n\tvar FOAPhaseMatchedFilter = __webpack_require__(7);\n\tvar FOAVirtualSpeaker = __webpack_require__(8);\n\tvar FOADecoder = __webpack_require__(9);\n\tvar FOARenderer = __webpack_require__(12);\n\n\t/**\n\t * Load audio buffers based on the speaker configuration map data.\n\t * @param {AudioContext} context      The associated AudioContext.\n\t * @param {Map} speakerData           The speaker configuration map data.\n\t *                                    { name, url, coef }\n\t * @return {Promise}\n\t */\n\tOmnitone.loadAudioBuffers = function (context, speakerData) {\n\t  return new Promise(function (resolve, reject) {\n\t    new AudioBufferManager(context, speakerData, function (buffers) {\n\t      resolve(buffers);\n\t    }, reject);\n\t  });\n\t};\n\n\t/**\n\t * Create an instance of FOA Convolver. For parameters, refer the definition of\n\t * Router class.\n\t * @return {Object}\n\t */\n\tOmnitone.createFOAConvolver = function (context, options) {\n\t  return new FOAConvolver(context, options);\n\t};\n\n\t/**\n\t * Create an instance of FOA Router. For parameters, refer the definition of\n\t * Router class.\n\t * @return {Object}\n\t */\n\tOmnitone.createFOARouter = function (context, channelMap) {\n\t  return new FOARouter(context, channelMap);\n\t};\n\n\t/**\n\t * Create an instance of FOA Rotator. For parameters, refer the definition of\n\t * Rotator class.\n\t * @return {Object}\n\t */\n\tOmnitone.createFOARotator = function (context) {\n\t  return new FOARotator(context);\n\t};\n\n\t/**\n\t * Create an instance of FOAPhaseMatchedFilter. For parameters, refer the\n\t * definition of PhaseMatchedFilter class.\n\t * @return {FOAPhaseMatchedFilter}\n\t */\n\tOmnitone.createFOAPhaseMatchedFilter = function (context) {\n\t  return new FOAPhaseMatchedFilter(context);\n\t};\n\n\t/**\n\t * Create an instance of FOAVirtualSpeaker. For parameters, refer the\n\t * definition of VirtualSpeaker class.\n\t * @return {FOAVirtualSpeaker}\n\t */\n\tOmnitone.createFOAVirtualSpeaker = function (context, options) {\n\t  return new FOAVirtualSpeaker(context, options);\n\t};\n\n\t/**\n\t * Create a singleton FOADecoder instance.\n\t * @param {AudioContext} context      Associated AudioContext.\n\t * @param {DOMElement} videoElement   Video or Audio DOM element to be streamed.\n\t * @param {Object} options            Options for FOA decoder.\n\t * @param {String} options.baseResourceUrl    Base URL for resources.\n\t *                                            (HRTF IR files)\n\t * @param {Number} options.postGain           Post-decoding gain compensation.\n\t *                                            (Default = 26.0)\n\t * @param {Array} options.routingDestination  Custom channel layout.\n\t * @return {FOADecoder}\n\t */\n\tOmnitone.createFOADecoder = function (context, videoElement, options) {\n\t  return new FOADecoder(context, videoElement, options);\n\t};\n\n\t/**\n\t * Create a singleton FOARenderer instance.\n\t * @param {AudioContext} context      Associated AudioContext.\n\t * @param {Object} options            Options.\n\t * @param {String} options.HRIRUrl    Optional HRIR URL.\n\t * @param {Number} options.postGainDB Optional post-decoding gain in dB.\n\t * @param {Array} options.channelMap  Optional custom channel map.\n\t */\n\tOmnitone.createFOARenderer = function (context, options) {\n\t  return new FOARenderer(context, options);\n\t};\n\n\tmodule.exports = Omnitone;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2016 Google Inc. All Rights Reserved.\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\n\t/**\n\t * @fileOverview Audio buffer loading utility.\n\t */\n\n\t'use strict';\n\n\tvar Utils = __webpack_require__(3);\n\n\t/**\n\t * Streamlined audio file loader supports Promise.\n\t * @param {Object} context          AudioContext\n\t * @param {Object} audioFileData    Audio file info as [{name, url}]\n\t * @param {Function} resolve        Resolution handler for promise.\n\t * @param {Function} reject         Rejection handler for promise.\n\t * @param {Function} progress       Progress event handler.\n\t */\n\tfunction AudioBufferManager(context, audioFileData, resolve, reject, progress) {\n\t  this._context = context;\n\n\t  this._buffers = new Map();\n\t  this._loadingTasks = {};\n\n\t  this._resolve = resolve;\n\t  this._reject = reject;\n\t  this._progress = progress;\n\n\t  // Iterating file loading.\n\t  for (var i = 0; i < audioFileData.length; i++) {\n\t    var fileInfo = audioFileData[i];\n\n\t    // Check for duplicates filename and quit if it happens.\n\t    if (this._loadingTasks.hasOwnProperty(fileInfo.name)) {\n\t      Utils.log('Duplicated filename when loading: ' + fileInfo.name);\n\t      return;\n\t    }\n\n\t    // Mark it as pending (0)\n\t    this._loadingTasks[fileInfo.name] = 0;\n\t    this._loadAudioFile(fileInfo);\n\t  }\n\t}\n\n\tAudioBufferManager.prototype._loadAudioFile = function (fileInfo) {\n\t  var xhr = new XMLHttpRequest();\n\t  xhr.open('GET', fileInfo.url);\n\t  xhr.responseType = 'arraybuffer';\n\n\t  var that = this;\n\t  xhr.onload = function () {\n\t    if (xhr.status === 200) {\n\t      that._context.decodeAudioData(xhr.response,\n\t        function (buffer) {\n\t          // Utils.log('File loaded: ' + fileInfo.url);\n\t          that._done(fileInfo.name, buffer);\n\t        },\n\t        function (message) {\n\t          Utils.log('Decoding failure: '\n\t            + fileInfo.url + ' (' + message + ')');\n\t          that._done(fileInfo.name, null);\n\t        });\n\t    } else {\n\t      Utils.log('XHR Error: ' + fileInfo.url + ' (' + xhr.statusText \n\t        + ')');\n\t      that._done(fileInfo.name, null);\n\t    }\n\t  };\n\n\t  // TODO: fetch local resources if XHR fails.\n\t  xhr.onerror = function (event) {\n\t    Utils.log('XHR Network failure: ' + fileInfo.url);\n\t    that._done(fileInfo.name, null);\n\t  };\n\n\t  xhr.send();\n\t};\n\n\tAudioBufferManager.prototype._done = function (filename, buffer) {\n\t  // Label the loading task.\n\t  this._loadingTasks[filename] = buffer !== null ? 'loaded' : 'failed';\n\n\t  // A failed task will be a null buffer.\n\t  this._buffers.set(filename, buffer);\n\n\t  this._updateProgress(filename);\n\t};\n\n\tAudioBufferManager.prototype._updateProgress = function (filename) {\n\t  var numberOfFinishedTasks = 0, numberOfFailedTask = 0;\n\t  var numberOfTasks = 0;\n\n\t  for (var task in this._loadingTasks) {\n\t    numberOfTasks++;\n\t    if (this._loadingTasks[task] === 'loaded')\n\t      numberOfFinishedTasks++;\n\t    else if (this._loadingTasks[task] === 'failed')\n\t      numberOfFailedTask++;\n\t  }\n\n\t  if (typeof this._progress === 'function') {\n\t    this._progress(filename, numberOfFinishedTasks, numberOfTasks);\n\t    return;\n\t  }\n\n\t  if (numberOfFinishedTasks === numberOfTasks) {\n\t    this._resolve(this._buffers);\n\t    return;\n\t  }\n\n\t  if (numberOfFinishedTasks + numberOfFailedTask === numberOfTasks) {\n\t    this._reject(this._buffers);\n\t    return;\n\t  }\n\t};\n\n\tmodule.exports = AudioBufferManager;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Copyright 2016 Google Inc. All Rights Reserved.\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\n\t/**\n\t * @fileOverview Omnitone library common utilities.\n\t */\n\n\t'use strict';\n\n\t/**\n\t * Omnitone library logging function.\n\t * @type {Function}\n\t * @param {any} Message to be printed out.\n\t */\n\texports.log = function () {\n\t  window.console.log.apply(window.console, [\n\t    '%c[Omnitone]%c '\n\t      + Array.prototype.slice.call(arguments).join(' ') + ' %c(@'\n\t      + performance.now().toFixed(2) + 'ms)',\n\t    'background: #BBDEFB; color: #FF5722; font-weight: 700',\n\t    'font-weight: 400',\n\t    'color: #AAA'\n\t  ]);\n\t};\n\n\t/**\n\t * A 4x4 matrix inversion utility.\n\t * @param {Array} out   the receiving matrix.\n\t * @param {Array} a     the source matrix.\n\t * @returns {Array} out\n\t */\n\texports.invertMatrix4 = function (out, a) {\n\t  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n\t      a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n\t      a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n\t      a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n\t      b00 = a00 * a11 - a01 * a10,\n\t      b01 = a00 * a12 - a02 * a10,\n\t      b02 = a00 * a13 - a03 * a10,\n\t      b03 = a01 * a12 - a02 * a11,\n\t      b04 = a01 * a13 - a03 * a11,\n\t      b05 = a02 * a13 - a03 * a12,\n\t      b06 = a20 * a31 - a21 * a30,\n\t      b07 = a20 * a32 - a22 * a30,\n\t      b08 = a20 * a33 - a23 * a30,\n\t      b09 = a21 * a32 - a22 * a31,\n\t      b10 = a21 * a33 - a23 * a31,\n\t      b11 = a22 * a33 - a23 * a32,\n\n\t      det = b00 * b11 - b01 * b10 + b02 * b09 +\n\t            b03 * b08 - b04 * b07 + b05 * b06;\n\n\t  if (!det)\n\t    return null;\n\t  det = 1.0 / det;\n\n\t  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n\t  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n\t  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n\t  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n\t  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n\t  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n\t  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n\t  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n\t  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\t  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\t  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\t  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n\t  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n\t  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n\t  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n\t  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n\t  return out;\n\t}\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Copyright 2017 Google Inc. All Rights Reserved.\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\n\t/**\n\t * @fileOverview A collection of convolvers. Can be used for the optimized FOA\n\t *               binaural rendering. (e.g. SH-MaxRe HRTFs)\n\t */\n\n\t'use strict';\n\n\t/**\n\t * @class FOAConvolver\n\t * @description A collection of 2 stereo convolvers for 4-channel FOA stream.\n\t * @param {AudioContext} context        Associated AudioContext.\n\t * @param {Object} options              Options for speaker.\n\t * @param {AudioBuffer} options.IR      Stereo IR buffer for HRTF convolution.\n\t * @param {Number} options.gain         Post-gain for the speaker.\n\t */\n\tfunction FOAConvolver (context, options) {\n\t  if (options.IR.numberOfChannels !== 4)\n\t    throw 'IR does not have 4 channels. cannot proceed.';\n\n\t  this._active = false;\n\n\t  this._context = context;\n\n\t  this._input = this._context.createChannelSplitter(4);\n\t  this._mergerWY = this._context.createChannelMerger(2);\n\t  this._mergerZX = this._context.createChannelMerger(2);\n\t  this._convolverWY = this._context.createConvolver();\n\t  this._convolverZX = this._context.createConvolver();\n\t  this._splitterWY = this._context.createChannelSplitter(2);\n\t  this._splitterZX = this._context.createChannelSplitter(2);\n\t  this._inverter = this._context.createGain();\n\t  this._mergerBinaural = this._context.createChannelMerger(2);\n\t  this._summingBus = this._context.createGain();\n\n\t  // Group W and Y, then Z and X.\n\t  this._input.connect(this._mergerWY, 0, 0);\n\t  this._input.connect(this._mergerWY, 1, 1);\n\t  this._input.connect(this._mergerZX, 2, 0);\n\t  this._input.connect(this._mergerZX, 3, 1);\n\n\t  // Create a network of convolvers using splitter/merger.\n\t  this._mergerWY.connect(this._convolverWY);\n\t  this._mergerZX.connect(this._convolverZX);\n\t  this._convolverWY.connect(this._splitterWY);\n\t  this._convolverZX.connect(this._splitterZX);\n\t  this._splitterWY.connect(this._mergerBinaural, 0, 0);\n\t  this._splitterWY.connect(this._mergerBinaural, 0, 1);\n\t  this._splitterWY.connect(this._mergerBinaural, 1, 0);\n\t  this._splitterWY.connect(this._inverter, 1, 0);\n\t  this._inverter.connect(this._mergerBinaural, 0, 1);\n\t  this._splitterZX.connect(this._mergerBinaural, 0, 0);\n\t  this._splitterZX.connect(this._mergerBinaural, 0, 1);\n\t  this._splitterZX.connect(this._mergerBinaural, 1, 0);\n\t  this._splitterZX.connect(this._mergerBinaural, 1, 1);\n\n\t  this._convolverWY.normalize = false;\n\t  this._convolverZX.normalize = false;\n\n\t  // Generate 2 stereo buffers from a 4-channel IR.\n\t  this._setHRIRBuffers(options.IR);\n\n\t  // For asymmetric degree.\n\t  this._inverter.gain.value = -1;\n\n\t  // Input/Output proxy.\n\t  this.input = this._input;\n\t  this.output = this._summingBus;\n\n\t  this.enable();\n\t}\n\n\tFOAConvolver.prototype._setHRIRBuffers = function (hrirBuffer) {\n\t  // Use 2 stereo convolutions. This is because the mono convolution wastefully\n\t  // produces the stereo output with the same content.\n\t  this._hrirWY = this._context.createBuffer(2, hrirBuffer.length,\n\t                                            hrirBuffer.sampleRate);\n\t  this._hrirZX = this._context.createBuffer(2, hrirBuffer.length,\n\t                                            hrirBuffer.sampleRate);\n\n\t  // We do this because Safari does not support copyFromChannel/copyToChannel.\n\t  this._hrirWY.getChannelData(0).set(hrirBuffer.getChannelData(0));\n\t  this._hrirWY.getChannelData(1).set(hrirBuffer.getChannelData(1));\n\t  this._hrirZX.getChannelData(0).set(hrirBuffer.getChannelData(2));\n\t  this._hrirZX.getChannelData(1).set(hrirBuffer.getChannelData(3));\n\n\t  // After these assignments, the channel data in the buffer is immutable in\n\t  // FireFox. (i.e. neutered)\n\t  this._convolverWY.buffer = this._hrirWY;\n\t  this._convolverZX.buffer = this._hrirZX;\n\t};\n\n\tFOAConvolver.prototype.enable = function () {\n\t  this._mergerBinaural.connect(this._summingBus);\n\t  this._active = true;\n\t};\n\n\tFOAConvolver.prototype.disable = function () {\n\t  this._mergerBinaural.disconnect();\n\t  this._active = false;\n\t};\n\n\tmodule.exports = FOAConvolver;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Copyright 2016 Google Inc. All Rights Reserved.\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\n\t'use strict';\n\n\t/**\n\t * @fileOverview An audio channel re-router to resolve different channel layouts\n\t *               between various platforms.\n\t */\n\n\n\t/**\n\t * Channel map dictionary for various mapping scheme.\n\t *\n\t * @type {Object}\n\t */\n\tvar CHANNEL_MAP = {\n\t  // ACN, default channel map. Works correctly on Chrome and FireFox. (FFMpeg)\n\t  DEFAULT: [0, 1, 2, 3],\n\t  // Safari's decoder works differently on 4-channel stream.\n\t  APPLE: [2, 0, 1, 3],\n\t  // ACN -> FuMa conversion.\n\t  FUMA: [0, 3, 1, 2]\n\t};\n\n\n\t/**\n\t * @class A simple channel re-router.\n\t * @param {AudioContext} context Associated AudioContext.\n\t * @param {Array} channelMap  Routing destination array.\n\t *                                    e.g.) Chrome: [0, 1, 2, 3],\n\t *                                    Apple(Safari): [2, 0, 1, 3]\n\t */\n\tfunction FOARouter (context, channelMap) {\n\t  this._context = context;\n\n\t  this._splitter = this._context.createChannelSplitter(4);\n\t  this._merger = this._context.createChannelMerger(4);\n\n\t  this._channelMap = channelMap || CHANNEL_MAP.DEFAULT;\n\n\t  this._splitter.connect(this._merger, 0, this._channelMap[0]);\n\t  this._splitter.connect(this._merger, 1, this._channelMap[1]);\n\t  this._splitter.connect(this._merger, 2, this._channelMap[2]);\n\t  this._splitter.connect(this._merger, 3, this._channelMap[3]);\n\n\t  // input/output proxy.\n\t  this.input = this._splitter;\n\t  this.output = this._merger;\n\t}\n\n\n\t/**\n\t * Set a channel map array.\n\t *\n\t * @param {Array} channelMap A custom channel map for FOA stream.\n\t */\n\tFOARouter.prototype.setChannelMap = function (channelMap) {\n\t  if (!channelMap)\n\t    return;\n\n\t  this._channelMap = channelMap;\n\t  this._splitter.disconnect();\n\t  this._splitter.connect(this._merger, 0, this._channelMap[0]);\n\t  this._splitter.connect(this._merger, 1, this._channelMap[1]);\n\t  this._splitter.connect(this._merger, 2, this._channelMap[2]);\n\t  this._splitter.connect(this._merger, 3, this._channelMap[3]);\n\t}\n\n\n\t/**\n\t * Static channel map dictionary.\n\t *\n\t * @static\n\t * @type {Object}\n\t */\n\tFOARouter.CHANNEL_MAP = CHANNEL_MAP;\n\n\n\tmodule.exports = FOARouter;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Copyright 2016 Google Inc. All Rights Reserved.\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\n\t'use strict';\n\n\n\t/**\n\t * @fileOverview Sound field rotator for first-order-ambisonics decoding.\n\t */\n\n\n\t/**\n\t * @class First-order-ambisonic decoder based on gain node network.\n\t * @param {AudioContext} context    Associated AudioContext.\n\t */\n\tfunction FOARotator (context) {\n\t  this._context = context;\n\n\t  this._splitter = this._context.createChannelSplitter(4);\n\t  this._inY = this._context.createGain();\n\t  this._inZ = this._context.createGain();\n\t  this._inX = this._context.createGain();\n\t  this._m0 = this._context.createGain();\n\t  this._m1 = this._context.createGain();\n\t  this._m2 = this._context.createGain();\n\t  this._m3 = this._context.createGain();\n\t  this._m4 = this._context.createGain();\n\t  this._m5 = this._context.createGain();\n\t  this._m6 = this._context.createGain();\n\t  this._m7 = this._context.createGain();\n\t  this._m8 = this._context.createGain();\n\t  this._outY = this._context.createGain();\n\t  this._outZ = this._context.createGain();\n\t  this._outX = this._context.createGain();\n\t  this._merger = this._context.createChannelMerger(4);\n\n\t    // ACN channel ordering: [1, 2, 3] => [-Y, Z, -X]\n\t  this._splitter.connect(this._inY, 1); // Y (from channel 1)\n\t  this._splitter.connect(this._inZ, 2); // Z (from channel 2)\n\t  this._splitter.connect(this._inX, 3); // X (from channel 3)\n\t  this._inY.gain.value = -1;\n\t  this._inX.gain.value = -1;\n\n\t  // Apply the rotation in the world space.\n\t  // |Y|   | m0  m3  m6 |   | Y * m0 + Z * m3 + X * m6 |   | Yr |\n\t  // |Z| * | m1  m4  m7 | = | Y * m1 + Z * m4 + X * m7 | = | Zr |\n\t  // |X|   | m2  m5  m8 |   | Y * m2 + Z * m5 + X * m8 |   | Xr |\n\t  this._inY.connect(this._m0);\n\t  this._inY.connect(this._m1);\n\t  this._inY.connect(this._m2);\n\t  this._inZ.connect(this._m3);\n\t  this._inZ.connect(this._m4);\n\t  this._inZ.connect(this._m5);\n\t  this._inX.connect(this._m6);\n\t  this._inX.connect(this._m7);\n\t  this._inX.connect(this._m8);\n\t  this._m0.connect(this._outY);\n\t  this._m1.connect(this._outZ);\n\t  this._m2.connect(this._outX);\n\t  this._m3.connect(this._outY);\n\t  this._m4.connect(this._outZ);\n\t  this._m5.connect(this._outX);\n\t  this._m6.connect(this._outY);\n\t  this._m7.connect(this._outZ);\n\t  this._m8.connect(this._outX);\n\n\t  // Transform 3: world space to audio space.\n\t  this._splitter.connect(this._merger, 0, 0); // W -> W (to channel 0)\n\t  this._outY.connect(this._merger, 0, 1); // Y (to channel 1)\n\t  this._outZ.connect(this._merger, 0, 2); // Z (to channel 2)\n\t  this._outX.connect(this._merger, 0, 3); // X (to channel 3)\n\t  this._outY.gain.value = -1;\n\t  this._outX.gain.value = -1;\n\n\t  this.setRotationMatrix(new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]));\n\n\t  // input/output proxy.\n\t  this.input = this._splitter;\n\t  this.output = this._merger;\n\t}\n\n\n\t/**\n\t * Set 3x3 matrix for soundfield rotation. (gl-matrix.js style)\n\t * @param {Array} rotationMatrix    A 3x3 matrix of soundfield rotation. The\n\t *                                  matrix is in the row-major representation.\n\t */\n\tFOARotator.prototype.setRotationMatrix = function (rotationMatrix) {\n\t  this._m0.gain.value = rotationMatrix[0];\n\t  this._m1.gain.value = rotationMatrix[1];\n\t  this._m2.gain.value = rotationMatrix[2];\n\t  this._m3.gain.value = rotationMatrix[3];\n\t  this._m4.gain.value = rotationMatrix[4];\n\t  this._m5.gain.value = rotationMatrix[5];\n\t  this._m6.gain.value = rotationMatrix[6];\n\t  this._m7.gain.value = rotationMatrix[7];\n\t  this._m8.gain.value = rotationMatrix[8];\n\t};\n\n\t/**\n\t * Set 4x4 matrix for soundfield rotation. (Three.js style)\n\t * @param {Array} rotationMatrix4   A 4x4 matrix of soundfield rotation.\n\t */\n\tFOARotator.prototype.setRotationMatrix4 = function (rotationMatrix4) {\n\t  this._m0.gain.value = rotationMatrix4[0];\n\t  this._m1.gain.value = rotationMatrix4[1];\n\t  this._m2.gain.value = rotationMatrix4[2];\n\t  this._m3.gain.value = rotationMatrix4[4];\n\t  this._m4.gain.value = rotationMatrix4[5];\n\t  this._m5.gain.value = rotationMatrix4[6];\n\t  this._m6.gain.value = rotationMatrix4[8];\n\t  this._m7.gain.value = rotationMatrix4[9];\n\t  this._m8.gain.value = rotationMatrix4[10];\n\t};\n\n\t/**\n\t * Returns the current rotation matrix.\n\t * @return {Array}                  A 3x3 matrix of soundfield rotation. The\n\t *                                  matrix is in the row-major representation.\n\t */\n\tFOARotator.prototype.getRotationMatrix = function () {\n\t  return [\n\t    this._m0.gain.value, this._m1.gain.value, this._m2.gain.value,\n\t    this._m3.gain.value, this._m4.gain.value, this._m5.gain.value,\n\t    this._m6.gain.value, this._m7.gain.value, this._m8.gain.value\n\t  ];\n\t};\n\n\n\tmodule.exports = FOARotator;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2016 Google Inc. All Rights Reserved.\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\n\n\n\t/**\n\t * @fileOverview Phase matched filter for first-order-ambisonics decoding.\n\t */\n\n\t'use strict';\n\n\tvar Utils = __webpack_require__(3);\n\n\t// Static parameters.\n\tvar CROSSOVER_FREQUENCY = 690;\n\tvar GAIN_COEFFICIENTS = [1.4142, 0.8166, 0.8166, 0.8166];\n\n\t// Helper: generate the coefficients for dual band filter.\n\tfunction generateDualBandCoefficients(crossoverFrequency, sampleRate) {\n\t  var k = Math.tan(Math.PI * crossoverFrequency / sampleRate),\n\t      k2 = k * k,\n\t      denominator = k2 + 2 * k + 1;\n\n\t  return {\n\t    lowpassA: [1, 2 * (k2 - 1) / denominator, (k2 - 2 * k + 1) / denominator],\n\t    lowpassB: [k2 / denominator, 2 * k2 / denominator, k2 / denominator],\n\t    hipassA: [1, 2 * (k2 - 1) / denominator, (k2 - 2 * k + 1) / denominator],\n\t    hipassB: [1 / denominator, -2 * 1 / denominator, 1 / denominator]\n\t  };\n\t}\n\n\t/**\n\t * @class FOAPhaseMatchedFilter\n\t * @description A set of filters (LP/HP) with a crossover frequency to\n\t *              compensate the gain of high frequency contents without a phase\n\t *              difference.\n\t * @param {AudioContext} context        Associated AudioContext.\n\t */\n\tfunction FOAPhaseMatchedFilter (context) {\n\t  this._context = context;\n\n\t  this._input = this._context.createGain();\n\n\t  if (!this._context.createIIRFilter) {\n\t    Utils.log('IIR filter is missing. Using Biquad filter instead.');\n\t    this._lpf = this._context.createBiquadFilter();\n\t    this._hpf = this._context.createBiquadFilter();\n\t    this._lpf.frequency.value = CROSSOVER_FREQUENCY;\n\t    this._hpf.frequency.value = CROSSOVER_FREQUENCY;\n\t    this._hpf.type = 'highpass';\n\t  } else {\n\t    var coef = generateDualBandCoefficients(\n\t        CROSSOVER_FREQUENCY, this._context.sampleRate);\n\t    this._lpf = this._context.createIIRFilter(coef.lowpassB, coef.lowpassA);\n\t    this._hpf = this._context.createIIRFilter(coef.hipassB, coef.hipassA);\n\t  }\n\n\t  this._splitterLow = this._context.createChannelSplitter(4);\n\t  this._splitterHigh = this._context.createChannelSplitter(4);\n\t  this._gainHighW = this._context.createGain();\n\t  this._gainHighY = this._context.createGain();\n\t  this._gainHighZ = this._context.createGain();\n\t  this._gainHighX = this._context.createGain();\n\t  this._merger = this._context.createChannelMerger(4);\n\n\t  this._input.connect(this._hpf);\n\t  this._hpf.connect(this._splitterHigh);\n\t  this._splitterHigh.connect(this._gainHighW, 0);\n\t  this._splitterHigh.connect(this._gainHighY, 1);\n\t  this._splitterHigh.connect(this._gainHighZ, 2);\n\t  this._splitterHigh.connect(this._gainHighX, 3);\n\t  this._gainHighW.connect(this._merger, 0, 0);\n\t  this._gainHighY.connect(this._merger, 0, 1);\n\t  this._gainHighZ.connect(this._merger, 0, 2);\n\t  this._gainHighX.connect(this._merger, 0, 3);\n\n\t  this._input.connect(this._lpf);\n\t  this._lpf.connect(this._splitterLow);\n\t  this._splitterLow.connect(this._merger, 0, 0);\n\t  this._splitterLow.connect(this._merger, 1, 1);\n\t  this._splitterLow.connect(this._merger, 2, 2);\n\t  this._splitterLow.connect(this._merger, 3, 3);\n\n\t  // Apply gain correction to hi-passed pressure and velocity components:\n\t  // Inverting sign is necessary as the low-passed and high-passed portion are\n\t  // out-of-phase after the filtering.\n\t  var now = this._context.currentTime;\n\t  this._gainHighW.gain.setValueAtTime(-1 * GAIN_COEFFICIENTS[0], now);\n\t  this._gainHighY.gain.setValueAtTime(-1 * GAIN_COEFFICIENTS[1], now);\n\t  this._gainHighZ.gain.setValueAtTime(-1 * GAIN_COEFFICIENTS[2], now);\n\t  this._gainHighX.gain.setValueAtTime(-1 * GAIN_COEFFICIENTS[3], now);\n\n\t  // Input/output Proxy.\n\t  this.input = this._input;\n\t  this.output = this._merger;\n\t}\n\n\tmodule.exports = FOAPhaseMatchedFilter;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Copyright 2016 Google Inc. All Rights Reserved.\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\n\t/**\n\t * @fileOverview Virtual speaker abstraction for first-order-ambisonics\n\t *               decoding.\n\t */\n\n\t'use strict';\n\n\t/**\n\t * @class FOAVirtualSpeaker\n\t * @description A virtual speaker with ambisonic decoding gain coefficients\n\t *              and HRTF convolution for first-order-ambisonics stream.\n\t *              Note that the subgraph directly connects to context's\n\t *              destination.\n\t * @param {AudioContext} context        Associated AudioContext.\n\t * @param {Object} options              Options for speaker.\n\t * @param {Array} options.coefficients  Decoding coefficients for (W,Y,Z,X).\n\t * @param {AudioBuffer} options.IR      Stereo IR buffer for HRTF convolution.\n\t * @param {Number} options.gain         Post-gain for the speaker.\n\t */\n\tfunction FOAVirtualSpeaker (context, options) {\n\t  if (options.IR.numberOfChannels !== 2)\n\t    throw 'IR does not have 2 channels. cannot proceed.';\n\n\t  this._active = false;\n\t  \n\t  this._context = context;\n\n\t  this._input = this._context.createChannelSplitter(4);\n\t  this._cW = this._context.createGain();\n\t  this._cY = this._context.createGain();\n\t  this._cZ = this._context.createGain();\n\t  this._cX = this._context.createGain();\n\t  this._convolver = this._context.createConvolver();\n\t  this._gain = this._context.createGain();\n\n\t  this._input.connect(this._cW, 0);\n\t  this._input.connect(this._cY, 1);\n\t  this._input.connect(this._cZ, 2);\n\t  this._input.connect(this._cX, 3);\n\t  this._cW.connect(this._convolver);\n\t  this._cY.connect(this._convolver);\n\t  this._cZ.connect(this._convolver);\n\t  this._cX.connect(this._convolver);\n\t  this._convolver.connect(this._gain);\n\t  this._gain.connect(this._context.destination);\n\n\t  this.enable();\n\n\t  this._convolver.normalize = false;\n\t  this._convolver.buffer = options.IR;\n\t  this._gain.gain.value = options.gain;\n\n\t  // Set gain coefficients for FOA ambisonic streams.\n\t  this._cW.gain.value = options.coefficients[0];\n\t  this._cY.gain.value = options.coefficients[1];\n\t  this._cZ.gain.value = options.coefficients[2];\n\t  this._cX.gain.value = options.coefficients[3];\n\n\t  // Input proxy. Output directly connects to the destination.\n\t  this.input = this._input;\n\t}\n\n\tFOAVirtualSpeaker.prototype.enable = function () {\n\t  this._gain.connect(this._context.destination);\n\t  this._active = true;\n\t};\n\n\tFOAVirtualSpeaker.prototype.disable = function () {\n\t  this._gain.disconnect();\n\t  this._active = false;\n\t};\n\n\tmodule.exports = FOAVirtualSpeaker;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2016 Google Inc. All Rights Reserved.\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\n\n\t/**\n\t * @fileOverview Omnitone FOA decoder.\n\t */\n\n\t'use strict';\n\n\tvar AudioBufferManager = __webpack_require__(2);\n\tvar FOARouter = __webpack_require__(5);\n\tvar FOARotator = __webpack_require__(6);\n\tvar FOAPhaseMatchedFilter = __webpack_require__(7);\n\tvar FOAVirtualSpeaker = __webpack_require__(8);\n\tvar FOASpeakerData = __webpack_require__(10);\n\tvar Utils = __webpack_require__(3);\n\tvar SystemVersion = __webpack_require__(11);\n\n\t// By default, Omnitone fetches IR from the spatial media repository.\n\tvar HRTFSET_URL = 'https://raw.githubusercontent.com/GoogleChrome/omnitone/master/build/resources/';\n\n\t// Post gain compensation value.\n\tvar POST_GAIN_DB = 0;\n\n\n\t/**\n\t * @class Omnitone FOA decoder class.\n\t * @param {AudioContext} context      Associated AudioContext.\n\t * @param {VideoElement} videoElement Target video (or audio) element for\n\t *                                    streaming.\n\t * @param {Object} options\n\t * @param {String} options.HRTFSetUrl Base URL for the cube HRTF sets.\n\t * @param {Number} options.postGainDB Post-decoding gain compensation in dB.\n\t * @param {Array} options.channelMap  Custom channel map.\n\t */\n\tfunction FOADecoder (context, videoElement, options) {\n\t  this._isDecoderReady = false;\n\t  this._context = context;\n\t  this._videoElement = videoElement;\n\t  this._decodingMode = 'ambisonic';\n\n\t  this._postGainDB = POST_GAIN_DB;\n\t  this._HRTFSetUrl = HRTFSET_URL;\n\t  this._channelMap = FOARouter.CHANNEL_MAP.DEFAULT; // ACN\n\n\t  if (options) {\n\t    if (options.postGainDB)\n\t      this._postGainDB = options.postGainDB;\n\n\t    if (options.HRTFSetUrl)\n\t      this._HRTFSetUrl = options.HRTFSetUrl;\n\n\t    if (options.channelMap)\n\t      this._channelMap = options.channelMap;\n\t  }\n\n\t  // Rearrange speaker data based on |options.HRTFSetUrl|.\n\t  this._speakerData = [];\n\t  for (var i = 0; i < FOASpeakerData.length; ++i) {\n\t    this._speakerData.push({\n\t      name: FOASpeakerData[i].name,\n\t      url: this._HRTFSetUrl + '/' + FOASpeakerData[i].url,\n\t      coef: FOASpeakerData[i].coef\n\t    });\n\t  }\n\n\t  this._tempMatrix4 = new Float32Array(16);\n\t}\n\n\t/**\n\t * Initialize and load the resources for the decode.\n\t * @return {Promise}\n\t */\n\tFOADecoder.prototype.initialize = function () {\n\t  Utils.log('Version: ' + SystemVersion);\n\t  Utils.log('Initializing... (mode: ' + this._decodingMode + ')');\n\n\t  // Rerouting channels if necessary.\n\t  var channelMapString = this._channelMap.toString();\n\t  var defaultChannelMapString = FOARouter.CHANNEL_MAP.DEFAULT.toString();\n\t  if (channelMapString !== defaultChannelMapString) {\n\t    Utils.log('Remapping channels ([' + defaultChannelMapString + '] -> ['\n\t      + channelMapString + '])');\n\t  }\n\n\t  this._audioElementSource = this._context.createMediaElementSource(\n\t    this._videoElement);\n\t  this._foaRouter = new FOARouter(this._context, this._channelMap);\n\t  this._foaRotator = new FOARotator(this._context);\n\t  this._foaPhaseMatchedFilter = new FOAPhaseMatchedFilter(this._context);\n\n\t  this._audioElementSource.connect(this._foaRouter.input);\n\t  this._foaRouter.output.connect(this._foaRotator.input);\n\t  this._foaRotator.output.connect(this._foaPhaseMatchedFilter.input);\n\n\t  this._foaVirtualSpeakers = [];\n\n\t  // Bypass signal path.\n\t  this._bypass = this._context.createGain();\n\t  this._audioElementSource.connect(this._bypass);\n\n\t  // Get the linear amplitude from the post gain option, which is in decibel.\n\t  var postGainLinear = Math.pow(10, this._postGainDB/20);\n\t  Utils.log('Gain compensation: ' + postGainLinear + ' (' + this._postGainDB\n\t    + 'dB)');\n\n\t  // This returns a promise so developers can use the decoder when it is ready.\n\t  var me = this;\n\t  return new Promise(function (resolve, reject) {\n\t    new AudioBufferManager(me._context, me._speakerData,\n\t      function (buffers) {\n\t        for (var i = 0; i < me._speakerData.length; ++i) {\n\t          me._foaVirtualSpeakers[i] = new FOAVirtualSpeaker(me._context, {\n\t            coefficients: me._speakerData[i].coef,\n\t            IR: buffers.get(me._speakerData[i].name),\n\t            gain: postGainLinear\n\t          });\n\n\t          me._foaPhaseMatchedFilter.output.connect(\n\t            me._foaVirtualSpeakers[i].input);\n\t        }\n\n\t        // Set the decoding mode.\n\t        me.setMode(me._decodingMode);\n\t        me._isDecoderReady = true;\n\t        Utils.log('HRTF IRs are loaded successfully. The decoder is ready.');\n\n\t        resolve();\n\t      }, reject);\n\t  });\n\t};\n\n\t/**\n\t * Set the rotation matrix for the sound field rotation.\n\t * @param {Array} rotationMatrix      3x3 rotation matrix (row-major\n\t *                                    representation)\n\t */\n\tFOADecoder.prototype.setRotationMatrix = function (rotationMatrix) {\n\t  this._foaRotator.setRotationMatrix(rotationMatrix);\n\t};\n\n\n\t/**\n\t * Update the rotation matrix from a Three.js camera object.\n\t * @param  {Object} cameraMatrix      The Matrix4 obejct of Three.js the camera.\n\t */\n\tFOADecoder.prototype.setRotationMatrixFromCamera = function (cameraMatrix) {\n\t  // Extract the inner array elements and inverse. (The actual view rotation is\n\t  // the opposite of the camera movement.)\n\t  Utils.invertMatrix4(this._tempMatrix4, cameraMatrix.elements);\n\t  this._foaRotator.setRotationMatrix4(this._tempMatrix4);\n\t};\n\n\t/**\n\t * Set the decoding mode.\n\t * @param {String} mode               Decoding mode. When the mode is 'bypass'\n\t *                                    the decoder is disabled and bypass the\n\t *                                    input stream to the output. Setting the\n\t *                                    mode to 'ambisonic' activates the decoder.\n\t *                                    When the mode is 'off', all the\n\t *                                    processing is completely turned off saving\n\t *                                    the CPU power.\n\t */\n\tFOADecoder.prototype.setMode = function (mode) {\n\t  if (mode === this._decodingMode)\n\t    return;\n\n\t  switch (mode) {\n\n\t    case 'bypass':\n\t      this._decodingMode = 'bypass';\n\t      for (var i = 0; i < this._foaVirtualSpeakers.length; ++i)\n\t        this._foaVirtualSpeakers[i].disable();\n\t      this._bypass.connect(this._context.destination);\n\t      break;\n\n\t    case 'ambisonic':\n\t      this._decodingMode = 'ambisonic';\n\t      for (var i = 0; i < this._foaVirtualSpeakers.length; ++i)\n\t        this._foaVirtualSpeakers[i].enable();\n\t      this._bypass.disconnect();\n\t      break;\n\n\t    case 'off':\n\t      this._decodingMode = 'off';\n\t      for (var i = 0; i < this._foaVirtualSpeakers.length; ++i)\n\t        this._foaVirtualSpeakers[i].disable();\n\t      this._bypass.disconnect();\n\t      break;\n\n\t    default:\n\t      break;\n\t  }\n\n\t  Utils.log('Decoding mode changed. (' + mode + ')');\n\t};\n\n\tmodule.exports = FOADecoder;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Copyright 2016 Google Inc. All Rights Reserved.\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\n\t/**\n\t * See also:\n\t * https://github.com/google/spatial-media/tree/master/spatial-audio\n\t */\n\n\t/**\n\t * The data for FOAVirtualSpeaker. Each entry contains the URL for IR files and\n\t * the gain coefficients for the associated IR files. Note that the order of\n\t * coefficients follows the ACN channel ordering. (W,Y,Z,X)\n\t * @type {Array}\n\t */\n\tvar FOASpeakerData = [{\n\t  name: 'E35_A135',\n\t  url: 'E35_A135.wav',\n\t  gainFactor: 1,\n\t  coef: [.1250, 0.216495, 0.21653, -0.216495]\n\t}, {\n\t  name: 'E35_A-135',\n\t  url: 'E35_A-135.wav',\n\t  gainFactor: 1,\n\t  coef: [.1250, -0.216495, 0.21653, -0.216495]\n\t}, {\n\t  name: 'E-35_A135',\n\t  url: 'E-35_A135.wav',\n\t  gainFactor: 1,\n\t  coef: [.1250, 0.216495, -0.21653, -0.216495]\n\t}, {\n\t  name: 'E-35_A-135',\n\t  url: 'E-35_A-135.wav',\n\t  gainFactor: 1,\n\t  coef: [.1250, -0.216495, -0.21653, -0.216495]\n\t}, {\n\t  name: 'E35_A45',\n\t  url: 'E35_A45.wav',\n\t  gainFactor: 1,\n\t  coef: [.1250, 0.216495, 0.21653, 0.216495]\n\t}, {\n\t  name: 'E35_A-45',\n\t  url: 'E35_A-45.wav',\n\t  gainFactor: 1,\n\t  coef: [.1250, -0.216495, 0.21653, 0.216495]\n\t}, {\n\t  name: 'E-35_A45',\n\t  url: 'E-35_A45.wav',\n\t  gainFactor: 1,\n\t  coef: [.1250, 0.216495, -0.21653, 0.216495]\n\t}, {\n\t  name: 'E-35_A-45',\n\t  url: 'E-35_A-45.wav',\n\t  gainFactor: 1,\n\t  coef: [.1250, -0.216495, -0.21653, 0.216495]\n\t}];\n\n\tmodule.exports = FOASpeakerData;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Copyright 2016 Google Inc. All Rights Reserved.\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\n\t/**\n\t * @fileOverview Omnitone version.\n\t */\n\n\t'use strict';\n\n\t/**\n\t * Omnitone library version\n\t * @type {String}\n\t */\n\tmodule.exports = '0.2.2';\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2017 Google Inc. All Rights Reserved.\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\n\t'use strict';\n\n\t/**\n\t * @fileOverview Omnitone FOA decoder.\n\t */\n\tvar AudioBufferManager = __webpack_require__(2);\n\tvar FOARouter = __webpack_require__(5);\n\tvar FOARotator = __webpack_require__(6);\n\tvar FOAConvolver = __webpack_require__(4);\n\tvar Utils = __webpack_require__(3);\n\tvar SystemVersion = __webpack_require__(11);\n\n\t// HRIR for optimized FOA rendering.\n\t// TODO(hongchan): change this with the absolute URL.\n\tvar SH_MAXRE_HRIR_URL = 'resources/sh_hrir_o_1.wav';\n\n\n\t/**\n\t * @class Omnitone FOA renderer class. Uses the optimized convolution technique.\n\t * @param {AudioContext} context          Associated AudioContext.\n\t * @param {Object} options\n\t * @param {String} options.HRIRUrl        Optional HRIR URL.\n\t * @param {String} options.renderingMode  Rendering mode.\n\t * @param {Array} options.channelMap      Custom channel map.\n\t */\n\tfunction FOARenderer (context, options) {\n\t  this._context = context;\n\n\t  // Priming internal setting with |options|.\n\t  this._HRIRUrl = SH_MAXRE_HRIR_URL;\n\t  this._channelMap = FOARouter.CHANNEL_MAP.DEFAULT;\n\t  this._renderingMode = 'ambisonic';\n\t  if (options) {\n\t    if (options.HRIRUrl)\n\t      this._HRIRUrl = options.HRIRUrl;\n\t    if (options.renderingMode)\n\t      this._renderingMode = options.renderingMode;\n\t    if (options.channelMap)\n\t      this._channelMap = options.channelMap;\n\t  }\n\n\t  this._isRendererReady = false;\n\t}\n\n\n\t/**\n\t * Initialize and load the resources for the decode.\n\t * @return {Promise}\n\t */\n\tFOARenderer.prototype.initialize = function () {\n\t  Utils.log('Version: ' + SystemVersion);\n\t  Utils.log('Initializing... (mode: ' + this._renderingMode + ')');\n\t  Utils.log('Rendering via SH-MaxRE convolution.');\n\n\t  this._tempMatrix4 = new Float32Array(16);\n\n\t  return new Promise(this._initializeCallback.bind(this));\n\t};\n\n\n\t/**\n\t * Internal callback handler for |initialize| method.\n\t * @param {Function} resolve Promise resolution.\n\t * @param {Function} reject Promise rejection.\n\t */\n\tFOARenderer.prototype._initializeCallback = function (resolve, reject) {\n\t  var key = 'FOA_HRIR_AUDIOBUFFER';\n\t  new AudioBufferManager(\n\t      this._context,\n\t      [{ name: key, url: this._HRIRUrl }],\n\t      function (buffers) {\n\t        this.input = this._context.createGain();\n\t        this._bypass = this._context.createGain();\n\t        this._foaRouter = new FOARouter(this._context, this._channelMap);\n\t        this._foaRotator = new FOARotator(this._context);\n\t        this._foaConvolver = new FOAConvolver(this._context, {\n\t            IR: buffers.get(key)\n\t          });\n\t        this.output = this._context.createGain();\n\n\t        this.input.connect(this._foaRouter.input);\n\t        this.input.connect(this._bypass);\n\t        this._foaRouter.output.connect(this._foaRotator.input);\n\t        this._foaRotator.output.connect(this._foaConvolver.input);\n\t        this._foaConvolver.output.connect(this.output);\n\n\t        this.setChannelMap(this._channelMap);\n\t        this.setRenderingMode(this._renderingMode);\n\n\t        this._isRendererReady = true;\n\t        Utils.log('HRIRs are loaded successfully. The renderer is ready.');\n\t        resolve();\n\t      }.bind(this),\n\t      function (buffers) {\n\t        var errorMessage = 'Initialization failed: ' + key + ' is ' \n\t            + buffers.get(0) + '.';\n\t        Utils.log(errorMessage);\n\t        reject(errorMessage);\n\t      });\n\t};\n\n\t/**\n\t * Set the channel map.\n\t * @param {Array} channelMap          A custom channel map for FOA stream.\n\t */\n\tFOARenderer.prototype.setChannelMap = function (channelMap) {\n\t  if (!this._isRendererReady)\n\t    return;\n\n\t  if (channelMap.toString() !== this._channelMap.toString()) {\n\t    Utils.log('Remapping channels ([' + this._channelMap.toString() + '] -> ['\n\t      + channelMap.toString() + ']).');\n\t    this._channelMap = channelMap.slice();\n\t    this._foaRouter.setChannelMap(this._channelMap);\n\t  }\n\t};\n\n\t/**\n\t * Set the rotation matrix for the sound field rotation.\n\t * @param {Array} rotationMatrix      3x3 rotation matrix (row-major\n\t *                                    representation)\n\t */\n\tFOARenderer.prototype.setRotationMatrix = function (rotationMatrix) {\n\t  if (!this._isRendererReady)\n\t    return;\n\n\t  this._foaRotator.setRotationMatrix(rotationMatrix);\n\t};\n\n\n\t/**\n\t * Update the rotation matrix from a Three.js camera object.\n\t * @param  {Object} cameraMatrix      The Matrix4 obejct of Three.js the camera.\n\t */\n\tFOARenderer.prototype.setRotationMatrixFromCamera = function (cameraMatrix) {\n\t  if (!this._isRendererReady)\n\t    return;\n\n\t  // Extract the inner array elements and inverse. (The actual view rotation is\n\t  // the opposite of the camera movement.)\n\t  Utils.invertMatrix4(this._tempMatrix4, cameraMatrix.elements);\n\t  this._foaRotator.setRotationMatrix4(this._tempMatrix4);\n\t};\n\n\n\t/**\n\t * Set the decoding mode.\n\t * @param {String} mode               Decoding mode. When the mode is 'bypass'\n\t *                                    the decoder is disabled and bypass the\n\t *                                    input stream to the output. Setting the\n\t *                                    mode to 'ambisonic' activates the decoder.\n\t *                                    When the mode is 'off', all the\n\t *                                    processing is completely turned off saving\n\t *                                    the CPU power.\n\t */\n\tFOARenderer.prototype.setRenderingMode = function (mode) {\n\t  if (mode === this._renderingMode)\n\t    return;\n\n\t  switch (mode) {\n\t    // Bypass mode: The convolution path is disabled, disconnected (thus consume\n\t    // no CPU). Use bypass gain node to pass-through the input stream.\n\t    case 'bypass':\n\t      this._renderingMode = 'bypass';\n\t      this._foaConvolver.disable();\n\t      this._bypass.connect(this.output);\n\t      break;\n\n\t    // Ambisonic mode: Use the convolution and shut down the bypass path.\n\t    case 'ambisonic':\n\t      this._renderingMode = 'ambisonic';\n\t      this._foaConvolver.enable();\n\t      this._bypass.disconnect();\n\t      break;\n\n\t    // Off mode: Shut down all sound from the renderer.\n\t    case 'off':\n\t      this._renderingMode = 'off';\n\t      this._foaConvolver.disable();\n\t      this._bypass.disconnect();\n\t      break;\n\n\t    default:\n\t      // Unsupported mode. Ignore it.\n\t      Utils.log('Rendering mode \"' + mode + '\" is not supported.');\n\t      return;\n\t  }\n\n\t  Utils.log('Rendering mode changed. (' + mode + ')');\n\t};\n\n\n\tmodule.exports = FOARenderer;\n\n\n/***/ }\n/******/ ])\n});\n;","/// <reference path='../../node_modules/bitmovin-player-ui/src/ts/player.d.ts' />\r\nimport PlayerEvent = bitmovin.PlayerAPI.PlayerEvent;\r\nimport AudioTrack = bitmovin.PlayerAPI.AudioTrack;\r\nimport AudioChangedEvent = bitmovin.PlayerAPI.AudioChangedEvent;\r\nimport MediaTrackRole = bitmovin.PlayerAPI.MediaTrackRole;\r\nimport VRViewingDirectionChangeEvent = bitmovin.PlayerAPI.VRViewingDirectionChangeEvent;\r\nimport {AmbisonicsImplementation} from './AmbisonicsImplementation';\r\nimport {OmnitoneFOARendererImplementation} from './OmnitoneFOARendererImplementation';\r\n\r\nexport interface AmbisonicsConfig {\r\n  /**\r\n   * Tells if the first Ambisonic audio track, if existing, should be automatically selected for a VR source.\r\n   * Default: true\r\n   */\r\n  autoSelectAmbisonicAudio?: boolean;\r\n  /**\r\n   * The offset around the y-axis in radians. Can be used to apply a rotation offset to adjust\r\n   * the audio to the video field.\r\n   * Default: 0\r\n   */\r\n  yawOffset?: number;\r\n}\r\n\r\nexport class Ambisonics {\r\n\r\n  private static VR_SCHEME_ID_URI = 'https://bitmovin.com/082017/vr';\r\n  private static VR_SCHEME_VALUE_FOA = 'ambisonic-fo';\r\n\r\n  private player: bitmovin.PlayerAPI;\r\n  private config: AmbisonicsConfig;\r\n  private mediaElement: HTMLMediaElement;\r\n  private audioContext: AudioContext;\r\n  private implementation: AmbisonicsImplementation;\r\n  private enabled: boolean;\r\n\r\n  constructor(player: bitmovin.PlayerAPI, config: AmbisonicsConfig = {}) {\r\n    this.player = player;\r\n    this.config = config;\r\n\r\n    this.config.autoSelectAmbisonicAudio = config.autoSelectAmbisonicAudio || true;\r\n    this.config.yawOffset = config.yawOffset || 0;\r\n\r\n    player.addEventHandler(player.EVENT.ON_READY, this.onPlayerReady);\r\n    player.addEventHandler(player.EVENT.ON_AUDIO_CHANGED, this.onPlayerAudioChanged);\r\n\r\n    // In case this instance was created after a source has been loaded into the player, we do not wait for the next\r\n    // ON_SOURCE_LOADED event but initialize directly.\r\n    if (player.isReady()) {\r\n      this.initialize();\r\n    }\r\n  }\r\n\r\n  public release(): void {\r\n    this.disable();\r\n    this.player.removeEventHandler(this.player.EVENT.ON_READY, this.onPlayerReady);\r\n    this.player.removeEventHandler(this.player.EVENT.ON_AUDIO_CHANGED, this.onPlayerAudioChanged);\r\n    this.implementation.release();\r\n  }\r\n\r\n  private initialize() {\r\n    this.audioContext = new AudioContext();\r\n    this.mediaElement = (<any>this.player).getVideoElement();\r\n\r\n    if (Ambisonics.isVrContent(this.player) && this.config.autoSelectAmbisonicAudio) {\r\n      const audioTracks = this.player.getAvailableAudio();\r\n      const ambisonicAudioTrack = Ambisonics.findFirstAmbisonicTrack(audioTracks);\r\n\r\n      console.log(audioTracks, ambisonicAudioTrack);\r\n\r\n      if (ambisonicAudioTrack) {\r\n        this.player.setAudio(ambisonicAudioTrack.id);\r\n        console.debug('Autoselected first Ambisonics audio track', ambisonicAudioTrack);\r\n      }\r\n    }\r\n  }\r\n\r\n  private enable(): void {\r\n    if (!Ambisonics.isVrContent(this.player)) {\r\n      // Don't enable Ambisonics for non-VR content because it does not make any sense\r\n      return;\r\n    }\r\n\r\n    if (this.enabled) {\r\n      // Don't do anything if already enabled\r\n      return;\r\n    }\r\n\r\n    // Create the FOARenderer only the first time it is required, then we reuse it\r\n    if (!this.implementation) {\r\n      this.implementation = new OmnitoneFOARendererImplementation();\r\n      this.implementation.start(this.audioContext, this.mediaElement).catch(error => console.error(error));\r\n    } else {\r\n      // Re-enable Ambisonics processing (in case it has been disabled earlier)\r\n      this.implementation.enable();\r\n    }\r\n\r\n    this.player.addEventHandler(this.player.EVENT.ON_VR_VIEWING_DIRECTION_CHANGE,\r\n      this.onPlayerVrViewingDirectionChange);\r\n\r\n    this.enabled = true;\r\n  }\r\n\r\n  private disable(): void {\r\n    if (!this.enabled) {\r\n      // Don't do anything if already disabled\r\n      return;\r\n    }\r\n\r\n    // Disable rotation handling\r\n    this.player.removeEventHandler(this.player.EVENT.ON_VR_VIEWING_DIRECTION_CHANGE,\r\n      this.onPlayerVrViewingDirectionChange);\r\n\r\n    // Disable Ambisonics processing\r\n    this.implementation.disable();\r\n\r\n    this.enabled = false;\r\n  }\r\n\r\n  private static isVrContent(player: bitmovin.PlayerAPI): boolean {\r\n    // We can't use this in ON_READY as the VR handler is not yet loaded in there.\r\n    // We also can't check player.vr namespace availability for the same reason.\r\n    // return player.getVRStatus().contentType !== 'none';\r\n\r\n    // As a workaround, we check the source config because the player treats every source as VR\r\n    // source when the vr property in the source is set.\r\n    // TODO use method above once ON_READY is fixed\r\n    return !!player.getConfig().source && !!player.getConfig().source.vr;\r\n  }\r\n\r\n  private static isAmbisonicTrack(audioTrack: AudioTrack): boolean {\r\n    const audioTrackRoles: MediaTrackRole[] = (<any>audioTrack).role;\r\n\r\n    if (audioTrackRoles && audioTrackRoles.length > 0) {\r\n      for (let audioTrackRole of audioTrackRoles) {\r\n        if (audioTrackRole.schemeIdUri === Ambisonics.VR_SCHEME_ID_URI\r\n          && audioTrackRole.value === Ambisonics.VR_SCHEME_VALUE_FOA) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private static findFirstAmbisonicTrack(audioTracks: AudioTrack[]): AudioTrack {\r\n    // We iterate over all available audio tracks and check their roles to see if one is an Ambisonics track.\r\n    for (const audioTrack of audioTracks) {\r\n      if (Ambisonics.isAmbisonicTrack(audioTrack)) {\r\n        return audioTrack;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Converts yaw/pitch/roll into a 3x3 rotation matrix.\r\n   * @param {bitmovin.PlayerAPI.VR.ViewingDirection} direction the viewing direction from the player\r\n   * @param {AmbisonicsConfig} config\r\n   * @return {number[]} 3x3 rotation matrix\r\n   */\r\n  private static getRotationMatrix(direction: bitmovin.PlayerAPI.VR.ViewingDirection,\r\n                                   config: AmbisonicsConfig): number[] {\r\n    // Convert degrees to radians\r\n    const degToRad = Math.PI / 180;\r\n    const yaw = direction.yaw * degToRad;\r\n    const pitch = direction.pitch * degToRad;\r\n    const roll = direction.roll * degToRad;\r\n\r\n    // The Bitmovin player assumes 0 degree at the left of the equirectangular projection,\r\n    // while the source assumes it in the center, so we must correct our angles for the\r\n    // Ambisonics audio to match the VR video viewport.\r\n    const correctedYaw = yaw + config.yawOffset;\r\n    const correctedPitch = pitch;\r\n    const correctedRoll = roll;\r\n\r\n    // Convert yaw/pitch/roll to matrix: http://planning.cs.uiuc.edu/node102.html\r\n    const alpha = correctedYaw; // z-axis\r\n    const beta = correctedPitch; // y-axis\r\n    const gamma = correctedRoll; // x-axis\r\n    const sinAlpha = Math.sin(alpha);\r\n    const cosAlpha = Math.cos(alpha);\r\n    const sinBeta = Math.sin(beta);\r\n    const cosBeta = Math.cos(beta);\r\n    const sinGamma = Math.sin(gamma);\r\n    const cosGamma = Math.cos(gamma);\r\n\r\n    return [\r\n      cosAlpha * cosBeta,\r\n      cosAlpha * sinBeta * sinGamma - sinAlpha * cosGamma,\r\n      cosAlpha * sinBeta * cosGamma + sinAlpha * sinGamma,\r\n      sinAlpha * cosBeta,\r\n      sinAlpha * sinBeta * sinGamma + cosAlpha * cosGamma,\r\n      sinAlpha * sinBeta * cosGamma - cosAlpha * sinGamma,\r\n      -sinBeta,\r\n      cosBeta * sinGamma,\r\n      cosBeta * cosGamma,\r\n    ];\r\n  }\r\n\r\n  private onPlayerReady = (event: PlayerEvent) => {\r\n    this.initialize();\r\n  };\r\n\r\n  private onPlayerAudioChanged = (event: AudioChangedEvent) => {\r\n    const isOldAudioTrackAmbisonic = Ambisonics.isAmbisonicTrack(event.sourceAudio);\r\n    const isNewAudioTrackAmbisonic = Ambisonics.isAmbisonicTrack(event.targetAudio);\r\n\r\n    if (!isOldAudioTrackAmbisonic && isNewAudioTrackAmbisonic) {\r\n      console.debug('Activated Ambisonics audio', event.targetAudio);\r\n      this.enable();\r\n    } else if (isOldAudioTrackAmbisonic && !isNewAudioTrackAmbisonic) {\r\n      console.debug('Deactivated Ambisonics audio', event.targetAudio);\r\n      this.disable();\r\n    }\r\n  };\r\n\r\n  private onPlayerVrViewingDirectionChange = (event: VRViewingDirectionChangeEvent) => {\r\n    console.log('VRViewingDirectionChange', event.direction);\r\n    const rotationMatrix = Ambisonics.getRotationMatrix(event.direction, this.config);\r\n    this.implementation.update(rotationMatrix);\r\n  };\r\n}","import {AmbisonicsImplementation} from './AmbisonicsImplementation';\r\nimport {FOARenderer, Omnitone} from 'omnitone';\r\n\r\n/**\r\n * Implements Ambisonic decoding with Omnitone's FOARenderer\r\n * https://github.com/GoogleChrome/omnitone\r\n */\r\nexport class OmnitoneFOARendererImplementation implements AmbisonicsImplementation {\r\n\r\n  private audioContext: AudioContext;\r\n  private audioSource: MediaElementAudioSourceNode;\r\n  private foaRenderer: FOARenderer;\r\n\r\n  start(context: AudioContext, mediaElement: HTMLMediaElement): Promise<void> {\r\n    this.audioContext = context;\r\n    this.audioSource = this.audioContext.createMediaElementSource(mediaElement);\r\n\r\n    this.foaRenderer = Omnitone.createFOARenderer(this.audioContext, {\r\n      HRIRUrl: 'https://cdn.rawgit.com/GoogleChrome/omnitone/962089ca/build/resources/sh_hrir_o_1.wav',\r\n      // Remap channels from FuMa ordering (W,X,Y,Z) to ACN\r\n      channelMap: [0, 3, 1, 2],\r\n    });\r\n\r\n    return this.foaRenderer.initialize().then(() => {\r\n      this.audioSource.connect(this.foaRenderer.input);\r\n      this.foaRenderer.output.connect(this.audioContext.destination);\r\n    });\r\n  }\r\n\r\n  release(): Promise<void> {\r\n    this.disable();\r\n    this.audioSource.disconnect(this.foaRenderer.input);\r\n    this.foaRenderer.output.disconnect(this.audioContext.destination);\r\n    this.audioSource.connect(this.audioContext.destination);\r\n    return Promise.resolve();\r\n  }\r\n\r\n  enable(): void {\r\n    this.foaRenderer.setRenderingMode('ambisonic');\r\n  }\r\n\r\n  disable(): void {\r\n    this.foaRenderer.setRenderingMode('bypass');\r\n  }\r\n\r\n  update(rotationMatrix: number[]): void {\r\n    this.foaRenderer.setRotationMatrix(rotationMatrix);\r\n  }\r\n}","/// <reference path='Omnitone.d.ts' />\r\n\r\nimport {Ambisonics} from './Ambisonics';\r\n\r\n// Export Ambisonics integration to global namespace\r\nlet w = (window as any);\r\nw.bitmovin = w.bitmovin || {};\r\nw.bitmovin.player = w.bitmovin.player || {};\r\nw.bitmovin.player.vr = w.bitmovin.player.vr || {};\r\nw.bitmovin.player.vr.Ambisonics = Ambisonics;\r\n"]}